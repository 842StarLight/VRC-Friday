{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nimport time\nimport math\nimport random\n# Robot configuration\ncontroller_1 = Controller(PRIMARY)\n# drivetrain\ndt_left = MotorGroup(Motor(Ports.PORT19, GearSetting.RATIO_6_1, True), Motor(Ports.PORT20, GearSetting.RATIO_6_1, True))\ndt_right = MotorGroup(Motor(Ports.PORT11, GearSetting.RATIO_6_1, False), Motor(Ports.PORT12, GearSetting.RATIO_6_1, False))\n\ndt_left.set_stopping(BRAKE)\ndt_right.set_stopping(BRAKE)\n# inertial & solenoid\norientation = Inertial(Ports.PORT1)\nwings = DigitalOut(brain.three_wire_port.a)\n# components\nintake = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nendgame = MotorGroup(Motor(Ports.PORT15, GearSetting.RATIO_18_1, False), Motor(Ports.PORT16, GearSetting.RATIO_18_1, True))\ncatapult = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\n\nintake.set_velocity(200, PERCENT)\nendgame.set_position(0,DEGREES)\n# initialize everything\n\ntime.sleep(2)\nbrain.timer.clear()\nclass Components:\n    def __init__(self, endgame_ratio, cata_speed):\n        self.endgame_ratio = endgame_ratio\n        catapult.set_velocity(cata_speed, PERCENT)\n        self.wing_value = False\n        self.intake_value = None\n        wings.set(False)\n    def intake(self, direction):\n        if direction == None:\n            intake.stop()\n        else:\n            intake.spin(direction)\n        self.intake_value = direction\n    def endgame(self, direction, amount=None):\n        endgame.set_velocity(100, PERCENT)\n        if direction == None:\n            endgame.stop()\n        elif amount == None:\n            endgame.spin(direction)\n        else:\n            d = FORWARD if ((1 if direction == FORWARD else -1)*(1 if amount>=0 else -1)) == 1 else REVERSE\n            endgame.spin_for(d, abs(amount)*self.endgame_ratio, TURNS)\n    def catapult(self, direction=FORWARD, amount=None):\n        if direction == None:\n            catapult.stop()\n        elif amount == None:\n            catapult.spin(direction)\n        else:\n            d = FORWARD if ((1 if direction == FORWARD else -1)*(1 if amount>=0 else -1)) == 1 else REVERSE\n            catapult.spin_for(d, abs(amount)*self.endgame_ratio, TURNS)\n    def wings(self):\n        self.wing_value = False if self.wing_value else True\n        wings.set(self.wing_value)\nclass Drivetrain:\n    def __init_(self, gear_ratio, wheel_diameter):\n        self.gear_ratio = gear_ratio\n        self.wheel_diameter = wheel_diameter\n    def drive4(self, inches, speed=110, timeout=3):\n        dt_left.set_timeout(15)\n        dt_right.set_timeout(15)\n        dt_left.set_velocity(speed/2, PERCENT)\n        dt_right.set_velocity(speed/2, PERCENT)\n        direction = FORWARD if inches > 0 else REVERSE\n        dt_left.spin_for(direction, (abs(inches)/(math.pi*3.25))*60/36, TURNS, wait=False)\n        dt_right.spin_for(direction, (abs(inches)/(math.pi*3.25))*60/36, TURNS, wait=False)\n        old_time = brain.timer.time(SECONDS)\n        while dt_left.is_spinning() or dt_right.is_spinning():\n            if brain.timer.time(SECONDS)-old_time >= timeout:\n                dt_left.stop()\n                dt_right.stop()\n                break\n    def turn2(self, angle_unmodded, speed=41, tolerance=0.5):\n        angle = angle_unmodded % 360\n        while abs(angle - orientation.heading(DEGREES)) % 360 > tolerance:\n            wait(10, MSEC)\n            h = orientation.heading(DEGREES)\n            dt_left.set_velocity(abs((angle - h + 180) % 360 - 180) * speed * 2 / 180 + 3, PERCENT)\n            dt_right.set_velocity(abs((angle - h + 180) % 360 - 180) * speed * 2 / 180 + 3, PERCENT)\n            dt_left.spin(FORWARD if (angle - h + 180) % 360 - 180 > 0 else REVERSE)\n            dt_right.spin(REVERSE if (angle - h + 180) % 360 - 180 > 0 else FORWARD)\n        dt_left.stop()\n        dt_right.stop()\n        if abs(angle - orientation.heading(DEGREES)) % 360 > tolerance:\n            self.turn2(angle, speed=10, tolerance=tolerance)\ndt = Drivetrain(60/36, 3.25)\ncp = Components(80/12, 200)\n# driver control\ndef driver_control():\n    controller_1.buttonL2.pressed(lambda: cp.wings())\n    controller_1.buttonR2.pressed(lambda: cp.wings())\n\n    controller_1.buttonL1.pressed(lambda: cp.intake(None if cp.intake_value == FORWARD else FORWARD))\n    controller_1.buttonR1.pressed(lambda: cp.intake(None if cp.intake_value == REVERSE else REVERSE))\n    controller_1.buttonUp.pressed(lambda: endgame.spin(REVERSE))\n    controller_1.buttonDown.pressed(lambda: endgame.spin(FORWARD))\n\n    controller_1.buttonX.pressed(lambda: cp.catapult())\n    controller_1.buttonB.released(lambda: catapult.stop())\n    while True:\n        dt_left_speed = controller_1.axis3.position() + 0.5*controller_1.axis1.position()\n        dt_left.set_velocity(abs(dt_left_speed), PERCENT)\n        dt_left_dir = FORWARD if dt_left_speed >= 0 else REVERSE\n\n\n        dt_right_speed = controller_1.axis3.position() - 0.5*controller_1.axis1.position()\n        dt_right.set_velocity(abs(dt_right_speed), PERCENT)\n        dt_right_dir = FORWARD if dt_right_speed >= 0 else REVERSE\n        \n        dt_left.spin(dt_left_dir)\n        dt_right.spin(dt_right_dir)\n\n        wait(50, MSEC)\ndef autonomous():\n    pass\ncompetition = Competition(driver_control, autonomous)","textLanguage":"python","rconfig":[],"slot":2,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}